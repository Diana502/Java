<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE configuration
  PUBLIC "-//mybatis.org//DTD Config 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-config.dtd">
<configuration>
	<properties resource="mybatis/mybatis.properties">
		<!-- 启用属性默认值 -->
		<property name="org.apache.ibatis.parsing.PropertyParser.enable-default-value" value="true"/>
		
		<!-- 全局地开启或关闭配置文件中的所有映射器已经配置的任何缓存。	
		有效值：true | false
		默认值：true -->
		<property name="cacheEnabled" value="true"/>
		
		<!-- 延迟加载的全局开关。当开启时，所有关联对象都会延迟加载。 特定关联关系中可通过设置fetchType属性来覆盖该项的开关状态。
		有效值：true | false
		默认值：false	 -->
		<property name="lazyLoadingEnabled" value="false"/>
		
		<!-- 当开启时，任何方法的调用都会加载该对象的所有属性。否则，每个属性会按需加载（参考lazyLoadTriggerMethods).
		有效值：true | false
		默认值：false (true in ≤3.4.1) -->
		<property name="aggressiveLazyLoading" value="false"/>
		
		<!-- 是否允许单一语句返回多结果集（需要兼容驱动）。 
		有效值：true | false
		默认值：true-->
		<property name="multipleResultSetsEnabled" value="true"/>
		
		<!-- 使用列标签代替列名。不同的驱动在这方面会有不同的表现， 具体可参考相关驱动文档或通过测试这两种不同的模式来观察所用驱动的结果。 
		有效值：true | false
		默认值：true-->
		<property name="useColumnLabel" value="true"/>
		
		<!-- 允许 JDBC 支持自动生成主键，需要驱动兼容。 如果设置为 true 则这个设置强制使用自动生成主键，尽管一些驱动不能兼容但仍可正常工作（比如 Derby）。 
		有效值：true | false
		默认值：false-->
		<property name="useGeneratedKeys" value="false"/>
		
		<!-- 指定 MyBatis 应如何自动映射列到字段或属性。 NONE 表示取消自动映射；PARTIAL 只会自动映射没有定义嵌套结果集映射的结果集。 
		FULL 会自动映射任意复杂的结果集（无论是否嵌套）。
		有效值：NONE, PARTIAL, FULL
		默认值：PARTIAL -->
		<property name="autoMappingBehavior" value="PARTIAL"/>
		
		<!-- 指定发现自动映射目标未知列（或者未知属性类型）的行为。
		NONE: 不做任何反应
		WARNING: 输出提醒日志 ('org.apache.ibatis.session.AutoMappingUnknownColumnBehavior' 的日志等级必须设置为 WARN)
		FAILING: 映射失败 (抛出 SqlSessionException) 
		有效值：NONE, WARNING, FAILING
		默认值：NONE-->
		<property name="autoMappingUnknownColumnBehavior" value="NONE"/>
		
		<!-- 配置默认的执行器。SIMPLE 就是普通的执行器；REUSE 执行器会重用预处理语句（prepared statements）； BATCH 执行器将重用语句并执行批量更新。
		有效值：SIMPLE REUSE BATCH
		默认值：SIMPLE -->
		<property name="defaultExecutorType" value="SIMPLE"/>
		
		<!-- 设置超时时间，它决定驱动等待数据库响应的秒数。 
		有效值：任意正整数	
		默认值：Not Set (null)-->
		<property name="defaultStatementTimeout" value="15"/>
		
		<!-- 为驱动的结果集获取数量（fetchSize）设置一个提示值。此参数只可以在查询设置中被覆盖。
		有效值：任意正整数	
		默认值：Not Set (null) -->
		<property name="defaultFetchSize" value="1000"/>
		
		<!-- 允许在嵌套语句中使用分页（RowBounds）。如果允许使用则设置为false。 
		有效值：true | false
		默认值：False-->
		<property name="safeRowBoundsEnabled" value="false"/>
		
		<!-- 允许在嵌套语句中使用分页（ResultHandler）。如果允许使用则设置为false。 
		有效值：true | false
		默认值：True-->
		<property name="safeResultHandlerEnabled" value="true"/>
		
		<!-- 是否开启自动驼峰命名规则（camel case）映射，即从经典数据库列名 A_COLUMN 到经典 Java 属性名 aColumn 的类似映射。 
		有效值：true | false
		默认值：False-->
		<property name="mapUnderscoreToCamelCase" value="false"/>
		
		<!-- MyBatis 利用本地缓存机制（Local Cache）防止循环引用（circular references）和加速重复嵌套查询。
		 默认值为 SESSION，这种情况下会缓存一个会话中执行的所有查询。 
		 若设置值为 STATEMENT，本地会话仅用在语句执行上，对相同 SqlSession 的不同调用将不会共享数据。 
		 有效值：SESSION | STATEMENT
		 默认值：SESSION-->
		 <property name="localCacheScope" value="SESSION"/>
		 
		 <!-- 当没有为参数提供特定的 JDBC 类型时，为空值指定 JDBC 类型。 
		 某些驱动需要指定列的 JDBC 类型，多数情况直接用一般类型即可，比如 NULL、VARCHAR 或 OTHER。 
		 有效值：dbcType 常量. 大多都为: NULL, VARCHAR and OTHER
		 默认值：OTHER-->
		 <property name="jdbcTypeForNull" value="OTHER"/>
		 
		 <!-- 指定哪个对象的方法触发一次延迟加载。
		 有效值：用逗号分隔的方法列表。
		 默认值：equals,clone,hashCode,toString -->
		 <property name="lazyLoadTriggerMethods" value="equals,clone,hashCode,toString"/>
		 
		 <!-- 指定动态 SQL 生成的默认语言。
		 有效值：一个类型别名或完全限定类名
		 默认值：org.apache.ibatis.scripting.xmltags.XMLLanguageDriver -->
		 <property name="defaultScriptingLanguage" value="org.apache.ibatis.scripting.xmltags.XMLLanguageDriver"/>
		 
		 <!-- 指定 Enum 使用的默认 TypeHandler 。 (从3.4.5开始)
		 有效值：一个类型别名或完全限定类名。
		 默认值：org.apache.ibatis.type.EnumTypeHandler -->
		 <property name="defaultEnumTypeHandler" value="org.apache.ibatis.type.EnumTypeHandler"/>
		 
		 <!-- 指定当结果集中值为 null 的时候是否调用映射对象的 setter（map 对象时为 put）方法，
		 这对于有 Map.keySet() 依赖或 null 值初始化的时候是有用的。注意基本类型（int、boolean等）是不能设置成 null 的。
		 有效值：true | false
		 默认值：false -->
		 <property name="callSettersOnNulls" value="false"/>
		 
		 <!-- 当返回行的所有列都是空时，MyBatis默认返回null。 
		 当开启这个设置时，MyBatis会返回一个空实例。 请注意，它也适用于嵌套的结果集 (i.e. collectioin and association)。（从3.4.2开始）
		 有效值：true | false
		 默认值：false -->
		 <property name="returnInstanceForEmptyRow" value="false"/>
		 
		 <!-- 指定 MyBatis 增加到日志名称的前缀。
		 有效值：任何字符串
		 默认值：Not set -->
		 <property name="logPrefix" value="mybatis"/>
		 
		 <!-- 指定 MyBatis 所用日志的具体实现，未指定时将自动查找。
		 有效值：SLF4J | LOG4J | LOG4J2 | JDK_LOGGING | COMMONS_LOGGING | STDOUT_LOGGING | NO_LOGGING
		 默认值：Not set -->
		 <property name="logImpl" value="LOG4J"/>
		 
		 <!-- 指定 Mybatis 创建具有延迟加载能力的对象所用到的代理工具。
		 有效值：CGLIB | JAVASSIST
		 默认值：JAVASSIST (MyBatis 3.3 or above)	 -->
		 <property name="proxyFactory" value="JAVASSIST"/>
		 
		 <!-- 指定VFS的实现
		 有效值：自定义VFS的实现的类全限定名，以逗号分隔。	
		 默认值：Not set -->
		 <property name="vfsImpl" value=""/>
		 
		 <!-- 允许使用方法签名中的名称作为语句参数名称。 为了使用该特性，你的工程必须采用Java 8编译，并且加上-parameters选项。（从3.4.1开始）
		 有效值：true | false
		 默认值：true -->
		 <property name="useActualParamName" value="true"/>
		 
		 <!-- 指定一个提供Configuration实例的类。 这个被返回的Configuration实例用来加载被反序列化对象的懒加载属性值。 
		 这个类必须包含一个签名方法static Configuration getConfiguration(). (从 3.2.3 版本开始)
		 有效值：类型别名或者全类名
		 默认值：Not set -->
		 <property name="configurationFactory" value=""/>
	</properties>
	<settings>
		<setting name="cacheEnabled" value="${cacheEnabled}"/>
		<setting name="lazyLoadingEnabled" value="${lazyLoadingEnabled}"/>
		<setting name="aggressiveLazyLoading" value="${aggressiveLazyLoading}"/>
		<setting name="multipleResultSetsEnabled" value="${multipleResultSetsEnabled}"/>
		<setting name="useColumnLabel" value="${useColumnLabel}"/>
		<setting name="useGeneratedKeys" value="${useGeneratedKeys}"/>
		<setting name="autoMappingBehavior" value="${autoMappingBehavior}"/>
		<setting name="defaultExecutorType" value="${defaultExecutorType}"/>
		<setting name="defaultStatementTimeout" value="${defaultStatementTimeout}"/>
		<setting name="safeRowBoundsEnabled" value="${safeRowBoundsEnabled}"/>
		<setting name="safeResultHandlerEnabled" value="${safeResultHandlerEnabled}"/>
		<setting name="mapUnderscoreToCamelCase" value="${mapUnderscoreToCamelCase}"/>
		<setting name="localCacheScope" value="${localCacheScope}"/>
		<setting name="jdbcTypeForNull" value="${jdbcTypeForNull}"/>
		<setting name="lazyLoadTriggerMethods" value="${cacheEnabled}"/>
		<setting name="defaultScriptingLanguage" value="${defaultScriptingLanguage}"/>
		<setting name="callSettersOnNulls" value="${callSettersOnNulls}"/>
		<setting name="logPrefix" value="${logPrefix}"/>
		<setting name="logImpl" value="${logImpl}"/>
		<setting name="proxyFactory" value="${proxyFactory}"/>
		<!-- <setting name="autoMappingUnknownColumnBehavior" value="${autoMappingUnknownColumnBehavior}"/> -->
		<!-- <setting name="defaultFetchSize" value="${defaultFetchSize}"/> -->
		<!-- <setting name="defaultEnumTypeHandler" value="${defaultEnumTypeHandler}"/> -->
		<!-- <setting name="returnInstanceForEmptyRow" value="${returnInstanceForEmptyRow}"/> -->
		<!-- <setting name="vfsImpl" value="${vfsImpl}"/> -->
		<!-- <setting name="useActualParamName" value="${useActualParamName}"/> -->
		<!-- <setting name="configurationFactory" value="${configurationFactory}"/> -->
	</settings>
</configuration>